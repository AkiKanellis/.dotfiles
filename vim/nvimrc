" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if &compatible
    set nocompatible
endif

"-----------------
" install plugin  
"-----------------

" install plugin automatically
" autocmd VimEnter * PlugInstall .

call plug#begin('~/nvim/plugged')

" Nerdtree + modifications: git icons plugin, color filetype plugin
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind']}
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" Plug 'Nopik/vim-nerdtree-direnter'
Plug 'jistr/vim-nerdtree-tabs'

" status bar
Plug 'itchyny/lightline.vim'

" fzf - poweful file searching 
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" project management for vim
Plug 'amiorin/vim-project'

" nerdtree - file explorer + extension for git
Plug 'ryanoasis/vim-devicons' 

call plug#end()

"------------------
" general binding 
"------------------

let mapleader = "\<Space>"

" highlight the line which is more than the defined margin (try to write a
" very long line to test :D)
highlight ColorColumn ctermbg=red
call matchadd('ColorColumn', '\%120v', 100)

" paste mode in order to paste correctly the formating from the clipboard
nnoremap <leader>p :set paste!<CR>

" show registers
nnoremap <leader>r :reg<CR>

" tabs
nnoremap th :tabfirst<CR>
nnoremap tj :tabnext<CR>
nnoremap tk :tabprev<CR>
nnoremap tl :tablast<CR>
nnoremap tn :tabnew<CR>

" windows management

" windows navigation
nnoremap <Leader>ww <c-w>w
nnoremap <Leader>wh <c-w>h
nnoremap <Leader>wj <c-w>j
nnoremap <Leader>wk <c-w>k
nnoremap <Leader>wl <c-w>l

" windows creation 
nnoremap <Leader>wb <c-w>s
nnoremap <Leader>wv <c-w>v

" prevent to use arrow keys
inoremap  <Up>     <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Down>   <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Left>   <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Right>  <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Up>     <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Down>   <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Left>   <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Right>  <esc>ggVGd:call NoArrowInput()<cr>

function! NoArrowInput()
        let l:input = ''
        echo "type no arrows to return to vim"
        while l:input !~ 'no arrows'
                let l:input = input("")
        endwhile
        u
endfunction

" restore the position of the cursor when you open a file
au BufReadPost * call RestorePosition()

func! RestorePosition()
    if exists("g:restore_position_ignore") && match(expand("%"), g:restore_position_ignore) > -1
        return
    endif

    if line("'\"") > 1 && line("'\"") <= line("$")
        exe "normal! g`\""
    endif
endfunc

" edit vimrc with f5 and source it automatically
nmap <silent> <leader><f5> :e $MYVIMRC<CR>
augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC nested source $MYVIMRC
augroup END

"-----------------
" general config 
"-----------------

" set the directory where the swap file will be saved
set backupdir=~/nvim/backup//
set directory=~/nvim/swap//
set undodir=~/nvim/undo//

" set line number
set number

set autoindent

" the copy goes to the clipboard
set clipboard+=unnamedplus

" use 4 spaces instead of tab (to replace existing tab use :retab)
set expandtab
set tabstop=4

" display tabs, trailing spaces

exec "set listchars=tab:\uBB\uBB,trail:\uB7"
set list

"----------------
" plugin config 
"----------------

" vim project - doesn't work
" let g:project_use_nerdtree = 1
" let g:project_enable_welcome = 1

" set rtp+=~/nvim/plugged/vim-project/
" call project#rc()

" Project '~/workspace/sharetoall'

" nerdtree
nmap <leader>n :NERDTreeTabsToggle<CR>

" don't display informations (type ? for help and so on)
let g:NERDTreeMinimalUI = 1
" don't replace the native vim file explorer
let g:NERDTreeHijackNetrw = 0
let g:NERDTreeChDirMode = 2
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeShowBookmarks = 0
let g:NERDTreeCascadeOpenSingleChildDir = 1

" change the arrows
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

"----------------
" general theme 
"----------------

let g:lightline = {
      \ 'colorscheme': 'seoul256',
      \ }

function! MyFiletype()
        return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype. ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
        return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction
