" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if &compatible
    set nocompatible
endif

"-----------------
" install plugin  
"-----------------

" install plugin automatically
" autocmd VimEnter * PlugInstall .

call plug#begin('~/nvim/plugged')

" wrapper for git
Plug 'tpope/vim-fugitive'

" php autocompletion
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'shawncplus/phpcomplete.vim'

Plug 'joonty/vdebug'
" php quality tools (codesniffer, messdetector...)
 Plug 'phux/vim-phpqa'

" Nerdtree + modifications: git icons plugin, color filetype plugin
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind']}
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons' 

" status bar
Plug 'itchyny/lightline.vim'

" close the buffer
 Plug 'moll/vim-bbye'

" fzf - poweful file searching 
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'jszakmeister/vim-togglecursor'

" Require padawan-php via composer
" Plug 'padawan-php/deoplete-padawan'

" Plug 'Shougo/vimproc'
" Plug 'Shougo/unite.vim'
" Plug 'php-vim/phpcd.vim', { 'for': 'php' , 'do': 'composer update' }

" Plug 'm2mdas/phpcomplete-extended'

call plug#end()

"----------------
" plugin config
"----------------

" vdebug

let g:vdebug_options = {}
let g:vdebug_options["port"] = 9000
let g:vdebug_keymap = {
\    "run" : "<F5>",
\    "run_to_cursor" : "<F9>",
\    "step_over" : "<F2>",
\    "step_into" : "<F3>",
\    "step_out" : "<F4>",
\    "close" : "<F6>",
\    "detach" : "<F7>",
\    "set_breakpoint" : "<F10>",
\    "get_context" : "<F11>",
\    "eval_under_cursor" : "<F12>",
\    "eval_visual" : "<F8>",
\}

let g:vdebug_options["path_maps"] = {
    \       "/var/www/logistic/current": "/var/www/logistic",
\}

" close the buffer
nmap <leader>bd :Bdelete<cr> 

source ~/nvim/pluggedconf/phpcomplete.nvimrc
source ~/nvim/pluggedconf/deoplete.nvimrc
source ~/nvim/pluggedconf/nerdtree.nvimrc
source ~/nvim/pluggedconf/lightline.nvimrc
source ~/nvim/pluggedconf/fzf.nvimrc
source ~/nvim/pluggedconf/phpqa.nvimrc

" link phpcomplete and deoplete - maybe not necessary
" autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP

"------------------
" general binding
"------------------

let mapleader = "\\"
nmap <SPACE> <leader>

" highlight the line which is longer than the defined margin (120)
highlight ColorColumn ctermbg=red
call matchadd('ColorColumn', '\%120v', 100)

" paste mode in order to paste correctly the formating from the clipboard
nnoremap <leader>p :set paste!<CR>

" show registers
nnoremap <leader>r :reg<CR>

" show file buffer
nnoremap <leader>b :buffers<CR>

" tabs
nnoremap th :tabfirst<CR>
nnoremap tj :tabnext<CR>
nnoremap tk :tabprev<CR>
nnoremap tl :tablast<CR>
nnoremap tn :tabnew<CR>

" windows management

" windows navigation
nnoremap <Leader>ww <c-w>w
nnoremap <Leader>wh <c-w>h
nnoremap <Leader>wj <c-w>j
nnoremap <Leader>wk <c-w>k
nnoremap <Leader>wl <c-w>l

" windows creation 
nnoremap <Leader>wb <c-w>s
nnoremap <Leader>wv <c-w>v

" prevent to use arrow keys
inoremap  <Up>     <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Down>   <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Left>   <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Right>  <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Up>     <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Down>   <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Left>   <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Right>  <esc>ggVGd:call NoArrowInput()<cr>

function! NoArrowInput()
        let l:input = ''
        echo "type no arrows to return to vim"
        while l:input !~ 'no arrows'
                let l:input = input("")
        endwhile
        u
endfunction

" restore the position of the cursor when you open a file
au BufReadPost * call RestorePosition()

func! RestorePosition()
    if exists("g:restore_position_ignore") && match(expand("%"), g:restore_position_ignore) > -1
        return
    endif

    if line("'\"") > 1 && line("'\"") <= line("$")
        exe "normal! g`\""
    endif
endfunc

" edit vimrc with f5 and source it automatically
nmap <silent> <leader><f5> :e $MYVIMRC<CR>
augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC nested source $MYVIMRC
augroup END

"-----------------
" general config 
"-----------------

" colorscheme
colo hypnos

" set the directory where the swap file will be saved
set backupdir=~/nvim/backup//
set directory=~/nvim/swap//
set undodir=~/nvim/undo//

" set line number
set number

" the copy goes to the clipboard
set clipboard+=unnamedplus

" use 4 spaces instead of tab (to replace existing tab use :retab)
set expandtab
set tabstop=4

" display tabs, trailing spaces
set list
"exec "set listchars=tab:\uBB\uBB,trail:\uB7"
"let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±,trail:'
" doesn't prompt a warning when opening a file and the current file was
" written but not saved 
set hidden
