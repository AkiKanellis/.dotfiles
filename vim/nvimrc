" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if &compatible
    set nocompatible
endif

"-----------------
" install plugin
"-----------------

call plug#begin('~/nvim/plugged')

" syntax highlighting for tmux.conf + other cool options
Plug 'tmux-plugins/vim-tmux' | Plug 'tmux-plugins/vim-tmux-focus-events'
" seemless navigation between vim windows / tmux pane
Plug 'christoomey/vim-tmux-navigator'

" wrapper for git and display git diff in the left gutter
Plug 'tpope/vim-fugitive' | Plug 'airblade/vim-gitgutter'

" General autocomplete system
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" vim project for one specific vimrc / project + startify for startup cow
Plug 'amiorin/vim-project'
Plug 'mhinz/vim-startify'

" general quality tools 
Plug 'neomake/neomake'

" comment automatically
" Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-commentary'

" snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" markdown 
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" php autocompletion engine and tools
Plug 'shawncplus/phpcomplete.vim'
Plug '2072/PHP-Indenting-for-VIm'
Plug 'alvan/vim-php-manual'
Plug 'StanAngeloff/php.vim'
Plug 'stephpy/vim-php-cs-fixer'
Plug 'arnaud-lb/vim-php-namespace'

Plug 'beyondwords/vim-twig'
" php doc autocompletion
Plug 'tobyS/vmustache' | Plug 'tobyS/pdv'

" autoclose bracket and parenthesis when open
Plug 'Townk/vim-autoclose'

" Plug 'Shougo/vimproc'
" Plug 'Shougo/unite.vim'
" Plug 'php-vim/phpcd.vim', { 'for': 'php' , 'do': 'composer update' }

" Plug 'm2mdas/phpcomplete-extended'

" Outline
" Plug 'vim-scripts/tabbar'

" debugger
Plug 'joonty/vdebug'

" outline
Plug 'majutsushi/tagbar'

" Nerdtree + modifications: git icons plugin, color filetype plugin
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind']}
" Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" Plug 'ryanoasis/vim-devicons'

" status bar
Plug 'itchyny/lightline.vim'

" undo tree
Plug 'sjl/gundo.vim'

" registers
Plug 'vim-scripts/YankRing.vim'

" close the current buffer
Plug 'moll/vim-bbye'

" fzf - poweful search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" display the hexadecimal colors - useful for css and color config
Plug 'ap/vim-css-color'

call plug#end()

"----------------
" plugin config
"----------------

source ~/nvim/pluggedconf/deoplete.nvimrc
source ~/nvim/pluggedconf/phpcomplete.nvimrc
source ~/nvim/pluggedconf/nerdtree.nvimrc
source ~/nvim/pluggedconf/lightline.nvimrc
source ~/nvim/pluggedconf/fzf.nvimrc
source ~/nvim/pluggedconf/vdebug.nvimrc
source ~/nvim/pluggedconf/neomake.nvimrc
source ~/nvim/pluggedconf/project-vim.nvimrc
source ~/nvim/projects.nvimrc

" markdown
let g:vim_markdown_folding_disabled = 1

" vim comment
autocmd FileType php setlocal commentstring=\/\/\ %s

" ultisnips
let g:UltiSnipsExpandTrigger="<C-s>"

" close the buffer
nmap <leader>db :Bdelete<cr>

" map go to definition
map <leader>] :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" YankRing - show register
nnoremap <leader>r :YRShow<cr> 

" Only bookmarks for startify
let g:startify_list_order = ['bookmarks']

" php docs
let g:pdv_template_dir = $HOME ."/nvim/plugged/pdv/templates_snip"
nnoremap <leader>d :call pdv#DocumentWithSnip()<CR>

"------------------
" general binding
"------------------

" Weird hack for NERDTree to work
let mapleader = "\\"
nmap <SPACE> <leader>

" add a line in normal mode
nmap <leader>o o<esc>

" easy command
noremap ; :

" paste mode in order to paste correctly the formating from the clipboard
nnoremap <leader>p :set paste!<CR>

" un-highlight when esc is pressed (after search for example)
map <esc> :noh<cr>

" Enables you to save files with :w!! by using sudo if you forgot to open it as root
cmap w!! %!sudo tee > /dev/null %" display tabs, trailing spaces

" indent without kill the selection in vmode
vmap < <gv
vmap > >gv

" Replace easily every occurence of the word under the cursor
nnoremap <leader>[ :%s/<c-r><c-w>/<c-r><c-w>/g<left><left>

" reformat html -> each tag on own row
nmap <leader><F3> :%s/<[^>]*>/\r&\r/g<cr>gg=G:g/^$/d<cr><leader>/

" tabs
nnoremap th :tabfirst<CR>
nnoremap tj :tabnext<CR>
nnoremap tk :tabprev<CR>
nnoremap tl :tablast<CR>
nnoremap tn :tabnew<CR>

" windows management

" windows navigation
nnoremap <leader>ww <c-w>w
nnoremap <leader>wh <c-w>h
nnoremap <leader>wj <c-w>j
nnoremap <leader>wk <c-w>k
nnoremap <leader>wl <c-w>l

" close all windows except the current one
nnoremap <leader>wco :only<cr>
nnoremap <leader>wcc :cclose<cr>

" windows creation
nnoremap <leader>wb <c-w>s
nnoremap <leader>wv <c-w>v

" highlight the line which is longer than the defined margin (120)
highlight ColorColumn ctermbg=red
call matchadd('ColorColumn', '\%120v', 100)

" open devdocs.io with firefox
command! -nargs=? DevDocs :call system('type -p open >/dev/null 2>&1 && open http://devdocs.io/#q=<args> || firefox -url http://devdocs.io/#q=<args>')
au FileType python,ruby,rspec,javascript,html,php,eruby,coffee,haml nmap <buffer> <leader>D :exec "DevDocs " . fnameescape(expand('<cword>'))<CR>

" prevent to use arrow keys
inoremap  <Up>     <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Down>   <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Left>   <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Right>  <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Up>     <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Down>   <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Left>   <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Right>  <esc>ggVGd:call NoArrowInput()<cr>

function! NoArrowInput()
        let l:input = ''
        echo "type no arrows to return to vim"
        while l:input !~ 'no arrows'
                let l:input = input("")
        endwhile
        u
endfunction

" restore the position of the cursor when you open a file
au BufReadPost * call RestorePosition()

func! RestorePosition()
    if exists("g:restore_position_ignore") && match(expand("%"), g:restore_position_ignore) > -1
        return
    endif

    if line("'\"") > 1 && line("'\"") <= line("$")
        exe "normal! g`\""
    endif
endfunc

" edit vimrc with f5 and source it automatically
nmap <silent> <leader><f5> :e $MYVIMRC<CR>
augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC nested source $MYVIMRC
augroup END

" Switch between phpunit and classes
function! SwitchBetweenPhpunitAndClasses()
    let f = bufname("%")
    if f =~ '.php'
        if f =~  '/Tests/' && f =~ 'Test\.php'
            let filename = substitute(substitute(f, '/Tests/', '', ''), 'Test.php', '.php', '')
            if !filereadable(filename)
                let new_dir = substitute(filename, '/\w\+\.php', '', '')
                exe ":!mkdir -p ".new_dir
            endif
            exe ":e ".filename
        elseif f !~ 'Test\.php'
            let filename = substitute(substitute(f, 'Bundle/', 'Bundle/Tests/', ''), '.php', 'Test.php', '')
            if !filereadable(filename)
                let new_dir = substitute(filename, '/\w\+Test\.php', '', '')
                exe ":!mkdir -p ".new_dir
            endif
            exe ":e ".filename
        else
            echom "Could not switch because needed patterns not matched."
        endif
    endif
endfunction

" Parameters:
"
" fileExtension: the file extension this script should act on, i.e. 'php'
" (without dot)
"
" firstDirBeginning: a file path that identifies the first type
" of paths, i.e. 'tests/unit/'
"
" secondDirBeginning: a file path pattern that identifies the second type
" of paths, i.e. 'src/'
"
" filenameAddition: string that should be removed from the first filename and
" added to the second, i.e. 'Test' if your testfile filename has the suffix
" 'Test' as in /path/MyServiceTest.php
function! SwitchBetweenFilesSymfony(fileExtension, firstDirBeginning, secondDirBeginning, filenameAddition)
    let f = bufname("%")
    if f =~ '.'.a:fileExtension
        if f =~ a:firstDirBeginning && f =~ a:filenameAddition.'\.'.a:fileExtension
            let filename = substitute(substitute(f, a:firstDirBeginning, 'Bundle/', ''), a:filenameAddition, '', '')
            if !filereadable(filename)
                let new_dir = substitute(filename, '/\w\+\.'.a:fileExtension, '', '')
                exe ":!mkdir -p ".new_dir
            endif
            exe ":e ".filename
        elseif f =~ a:secondDirBeginning && f !~ a:filenameAddition.'\.'.a:fileExtension
            let filename = substitute(substitute(f, a:secondDirBeginning, a:firstDirBeginning, ''), '.'.a:fileExtension, a:filenameAddition.'.'.a:fileExtension, '')
            if !filereadable(filename)
                let new_dir = substitute(filename, '/\w\+'.a:filenameAddition.'\.'.a:fileExtension, '', '')
                exe ":!mkdir -p ".new_dir
            endif
            exe ":e ".filename
        else
            echom "Could not switch because needed patterns not matched."
        endif
    endif
endfunction

" switch between phpunit and class for symfony
function! SymfonySwitchToAlternateFile()
  let l:f = expand('%')
  let l:preceedingDirsToKeep = 2
  let l:is_test = expand('%:t') =~ "Test\."
  if l:is_test
    " remove phpunit_testroot
    let l:f = substitute(l:f, 'Tests/','','')
    " remove 'Test.' from filename
    let l:f = substitute(l:f,'Test\.','.','')
  else
      let l:pathParts = split(expand('%:r'), '/')
    let l:startingPath = l:pathParts[0:l:preceedingDirsToKeep]
    let l:endPath = l:pathParts[(l:preceedingDirsToKeep+1):]
    let l:combinedPath = l:startingPath + ['Tests'] + l:endPath
    let l:f = join(l:combinedPath, '/') . 'Test.php'
    if !filereadable(l:f)
        let l:new_dir = substitute(l:f, '/\w\+\.php', '', '')
        exe ":!mkdir -p ".l:new_dir
    endif
  endif
  " is there window with complent file open?
  let win = bufwinnr(l:f)
  if l:win > 0
    execute l:win . "wincmd w"
  else
    execute ":e " . l:f
  endif

endfunction

"-----------------
" general config 
"-----------------

" change cursor in nvim
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

" colorscheme
colo hypnos

" set the directory where the swap file will be saved
set backupdir=~/nvim/backup//
set directory=~/nvim/swap//

" save undo trees in files
set undofile
set undodir=~/nvim/undo//

" set line number
set number

" the copy goes to the clipboard
set clipboard+=unnamedplus

" use 4 spaces instead of tab (to replace existing tab use :retab)
" copy indent from current line when starting a new line
set autoindent
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
" when at 3 spaces, and I hit > ... go to 4, not 7
set shiftround

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

set list
" let &listchars="tab:▸,trail:,extends:❯,precedes:❮,nbsp:±"
" let &listchars = 'tab:▸,extends:❯,precedes:❮,nbsp:±,trail:'

" doesn't prompt a warning when opening a file and the current file was
" written but not saved 
set hidden

" doesn't display the mode status
set noshowmode

" no swap file!
set noswapfile
