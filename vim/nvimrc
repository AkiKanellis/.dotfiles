" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if &compatible
    set nocompatible
endif

"-----------------
" install plugin  
"-----------------

" install plugin automatically
" autocmd VimEnter * PlugInstall .

call plug#begin('~/nvim/plugged')

" php autocompletion
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'shawncplus/phpcomplete.vim'

" wrapper for git
Plug 'tpope/vim-fugitive'

" Require padawan-php via composer
" Plug 'padawan-php/deoplete-padawan'

" Plug 'Shougo/vimproc'
" Plug 'Shougo/unite.vim'
" Plug 'php-vim/phpcd.vim', { 'for': 'php' , 'do': 'composer update' }

" Plug 'm2mdas/phpcomplete-extended'

" Nerdtree + modifications: git icons plugin, color filetype plugin
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind']}
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" Plug 'Nopik/vim-nerdtree-direnter'
" Plug 'jistr/vim-nerdtree-tabs'

" status bar
Plug 'itchyny/lightline.vim'

" fzf - poweful file searching 
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" the silver searcher plugin
" Plug 'epmatsw/ag.vim'
" nerdtree - file explorer + extension for git
Plug 'ryanoasis/vim-devicons' 

call plug#end()

"----------------
" plugin config 
"----------------

source ~/nvim/pluggedconf/deoplete.nvimrc
source ~/nvim/pluggedconf/phpcomplete.nvimrc
source ~/nvim/pluggedconf/nerdtree.nvimrc
source ~/nvim/pluggedconf/lightline.nvimrc
source ~/nvim/pluggedconf/fzf.nvimrc

" link phpcomplete and deoplete - maybe not necessary
autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP

"------------------
" general binding 
"------------------

let mapleader = "\\"
nmap <SPACE> <leader>

" quick saving
nmap <leader>w :w<cr>

" highlight the line which is more than the defined margin (try to write a
" very long line to test :D)
highlight ColorColumn ctermbg=red
call matchadd('ColorColumn', '\%120v', 100)

" paste mode in order to paste correctly the formating from the clipboard
nnoremap <leader>p :set paste!<CR>

" show registers
nnoremap <leader>r :reg<CR>

" show file buffer
nnoremap <leader>b :buffers<CR>

" tabs
nnoremap th :tabfirst<CR>
nnoremap tj :tabnext<CR>
nnoremap tk :tabprev<CR>
nnoremap tl :tablast<CR>
nnoremap tn :tabnew<CR>

" windows management

" windows navigation
nnoremap <Leader>ww <c-w>w
nnoremap <Leader>wh <c-w>h
nnoremap <Leader>wj <c-w>j
nnoremap <Leader>wk <c-w>k
nnoremap <Leader>wl <c-w>l

" windows creation 
nnoremap <Leader>wb <c-w>s
nnoremap <Leader>wv <c-w>v

" prevent to use arrow keys
inoremap  <Up>     <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Down>   <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Left>   <esc>ggVGd:call NoArrowInput()<cr>
inoremap  <Right>  <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Up>     <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Down>   <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Left>   <esc>ggVGd:call NoArrowInput()<cr>
noremap   <Right>  <esc>ggVGd:call NoArrowInput()<cr>

function! NoArrowInput()
        let l:input = ''
        echo "type no arrows to return to vim"
        while l:input !~ 'no arrows'
                let l:input = input("")
        endwhile
        u
endfunction

" restore the position of the cursor when you open a file
au BufReadPost * call RestorePosition()

func! RestorePosition()
    if exists("g:restore_position_ignore") && match(expand("%"), g:restore_position_ignore) > -1
        return
    endif

    if line("'\"") > 1 && line("'\"") <= line("$")
        exe "normal! g`\""
    endif
endfunc

" edit vimrc with f5 and source it automatically
nmap <silent> <leader><f5> :e $MYVIMRC<CR>
augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC nested source $MYVIMRC
augroup END

"-----------------
" general config 
"-----------------

" set the directory where the swap file will be saved
set backupdir=~/nvim/backup//
set directory=~/nvim/swap//
set undodir=~/nvim/undo//

" set line number
set number

" the copy goes to the clipboard
set clipboard+=unnamedplus

" use 4 spaces instead of tab (to replace existing tab use :retab)
set expandtab
set tabstop=4

" display tabs, trailing spaces
exec "set listchars=tab:\uBB\uBB,trail:\uB7"
set list
