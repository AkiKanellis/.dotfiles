<?xml version="1.0"?>
<ruleset name="pantaflix">
    <!-- Todo -->
    <!-- <exclude-pattern>*/src/*</exclude-pattern> -->

    <description>This is Phantas0s coding standard description</description>
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    <rule ref="Generic.Commenting.Todo.CommentFound">
        <message>Please review this TODO comment: %s</message>
        <severity>3</severity>
        <type>warning</type>
    </rule>
    <rule ref="Generic.Commenting.Fixme">
        <message>Please review this FIXME comment: %s</message>
        <severity>3</severity>
        <type>warning</type>
    </rule>

    <rule ref="Generic.Files.LineLength">
     <properties>
      <property name="lineLimit" value="500"/>
      <property name="absoluteLineLimit" value="550"/>
     </properties>
    </rule>

    <rule ref="Generic.PHP.ForbiddenFunctions">
     <properties>
      <property name="forbiddenFunctions" type="array" value="print=>echo,create_function=>null,var_dump=>print_r" />
     </properties>
    </rule>

    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Files.ByteOrderMark"/>
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\r\n"/>
        </properties>
    </rule>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="15"/>
        </properties>
    </rule>
    <rule ref="Generic.Metrics.NestingLevel"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.NoSilencedErrors"/>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>

    <rule ref="MySource.PHP.EvalObjectFactory"/>
    <rule ref="MySource.PHP.GetRequestData"/>

    <rule ref="PSR1"/>
    <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace"/>
    <rule ref="PSR2"/>
    <rule ref="PSR2.Classes.ClassDeclaration"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing"/>
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>
    <rule ref="PSR2.Files.EndFileNewline"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
    <rule ref="PSR2.Namespaces.UseDeclaration"/>

    <rule ref="Squiz.PHP.CommentedOutCode"/>
    <rule ref="Squiz.PHP.DisallowComparisonAssignment"/>
    <rule ref="Squiz.PHP.DisallowInlineIf"/>
    <rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
    <rule ref="Squiz.PHP.DisallowObEndFlush"/>
    <rule ref="Squiz.PHP.EmbeddedPhp"/>
    <rule ref="Squiz.PHP.Eval"/>
    <rule ref="Squiz.PHP.ForbiddenFunctions"/>
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <rule ref="Squiz.PHP.InnerFunctions"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.PropertyLabelSpacing"/>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="true"/>
        </properties>
    </rule>
    <rule ref="Zend.Files.ClosingTag"/>
    <rule ref="Squiz.Classes.ClassFileName"/>
    <rule ref="Squiz.Commenting.VariableComment"/>
    <rule ref="Squiz.Commenting.InlineComment">
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType" />
        <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />
        <exclude name="Squiz.Commenting.InlineComment.NoSpaceBefore" />
        <exclude name="Squiz.Commenting.InlineComment.NotCapital" />
        <exclude name="Squiz.Commenting.InlineComment.SpacingAfter" />
    </rule>

    <rule ref="Squiz.Commenting.VariableComment"/>
    <rule ref="Squiz.Commenting.VariableComment.TagNotAllowed">
        <exclude-pattern>*</exclude-pattern>
    </rule>


    <rule ref="Squiz.Commenting.FunctionComment.DuplicateReturn">
        <message>Only 1 @return annotation is allowed in a function comment</message>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.ExtraParamComment">
        <message>Extra @param annotation</message>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.InvalidNoReturn">
        <message>Function has no return statement, but annotation @return is present</message>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment">
        <exclude name="Squiz.Commenting.FunctionComment.process.author"/>
        <exclude name="Squiz.Commenting.FunctionComment.process.copyright"/>
        <exclude name="Squiz.Commenting.FunctionComment.TagNotAllowed"/>
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>
        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/>
        <!-- collection syntax such as string[] is not supported -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>
        <!-- enforces incorrect types -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/>
        <!-- is not able to detect return types such as string|null as correct -->
        <exclude name="Squiz.Commenting.FunctionComment.InvalidThrows"/>
        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.Missing"/>
        <!-- comments are not required for @param -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>
        <!-- void type is not used -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
        <!-- comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>
        <!-- comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName"/>
        <!-- we don't want spacing with alignment -->
        <exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType"/>
        <!-- we don't want spacing with alignment -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>
        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNotCapital"/>
        <!-- @throws are forbidden -->
        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>
        <!-- doesn't work with self as typehint -->
    </rule>
</ruleset>
